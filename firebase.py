#------------------------------------------------------#
# Version Control:  v1.1                               #
# Date:             15-8-2018                          #
# Firebase Storage: sutd-rmp-2018-gotya.appspot.com    #
# Description:      Python 3.6 wrapper script.         #
#                   Allows access to Firebase Storage  #
#                     - Allows uploading of files      #
#                     - Allows downloading of files    #
#                     # Allows deletion of files       #
#------------------------------------------------------#

import pyrebase
import time
import os

# Initialisation and Configuration
config = {
    "apiKey": "apiKey",
    "authDomain": "sutd-rmp-2018-gotya.firebaseapp.com",
    "databaseURL": "https://sutd-rmp-2018-dotya.firebaseio.com/",
    "storageBucket": "sutd-rmp-2018-gotya.appspot.com"
}
firebase = pyrebase.initialize_app(config)
storage = firebase.storage()
database = firebase.database()

# Writes a image object (original, detections with bounding boxes)
# to the database, then uploads the corresponding images + crops
# to the bucket, under a directory with the same name as the key in the db.
# param 1: filepath - path to one batch in /output/, generated by detect.py
# param 2: boxes[{ classification, x1, y1, x2, y2 }] - bounding boxes + classifications
#          for each image
def upload_batch(filepath, boxes):
    print("Uploading batch {} from {}".format(boxes, filepath))
    # generate a unique key to push to database
    # this is similar to what db.push() does, but we need the key afterwards
    key = database.generate_key()
    
    upload_image(os.path.join(filepath, "original.png"), "{}/original.png".format(key))
    data = { "original": "{}/original.png".format(key), "detections": [] }
    
    for box_i, box in enumerate(boxes):
        dest_name = "{}/{}.png".format(key, str(box_i))
        file_to_upload = os.path.join(filepath, "{}.png".format(str(box_i)))
        
        upload_image(file_to_upload, dest_name)
        box["filename"] = dest_name 
        data["detections"].append(box)

    database.child("images").child(key).set(data)
        

# Function to post files onto Firebase Storage
# param 1: filepath - The filepath to the file saved on the computer
# param 2: dest - The destination filepath relative to the storage bucket
def upload_image(filepath, dest):
    storage.child(dest).put(filepath)
    # Example of function usage:
    # upload_file("C:/Users/.../test.txt", "test/test.txt")

# Function to download files from Firebase Storage
# param 1: src - The source filepath relative to the storage bucket
# param 2: filename - The preferred filename of the downloaded file
def download_file(src, filename):
    storage.child(src).download(filename)
    # Example of function usage:
    # download_file("test/test.txt", "C:/Users/.../test.txt")

# Function to delete files from Firebase Storage
# param 1: file - The filepath (to delete) relative to the storage bucket
# Remarks: Requires authenticated user to delete files
# def delete_file(file):
#     storage.delete(file)
#     # Example of function usage:
#     # delete_file("test/test.txt")
